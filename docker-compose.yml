version: '3.8'

services:
  rasa:
    build: 
      context: ./rasa_bot
      dockerfile: Dockerfile
    ports:
      - "5005:5005"
    volumes:
      - ./rasa_bot:/app
    environment:
      - PYTHONPATH=/app
      - RASA_ACTIONS_URL=http://rasa-actions:5055/webhook
      - SQLALCHEMY_SILENCE_UBER_WARNING=1
    # Use full rasa CLI invocation so the server starts with the API enabled
    command: ["run", "--enable-api", "--cors", "*", "--endpoints", "endpoints.yml"]
    depends_on:
      - rasa-actions
      - db
      - kafka

  rasa-actions:
    build:
      context: ./rasa_bot
      dockerfile: actions.Dockerfile
    ports:
      - "5055:5055"
    environment:
      - PYTHONPATH=/app
      - BACKEND_URL=http://backend:8000
      - SQLALCHEMY_SILENCE_UBER_WARNING=1
    command: ["start"]

  backend:
    build: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./frontend:/app/frontend
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - WHATSAPP_API_KEY=${WHATSAPP_API_KEY}
      - SMS_API_KEY=${SMS_API_KEY}
    depends_on:
      - db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    volumes:
      - ./frontend:/app
    environment:
      - BACKEND_URL=http://backend:8000
      - RASA_URL=http://rasa:5005

  db:
    image: postgres:13
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_NUM_PARTITIONS=1
      - CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - ./infra/grafana:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  postgres_data:
  prometheus_data:
  grafana_data: